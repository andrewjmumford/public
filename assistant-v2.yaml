openapi: 3.0.0
info:
  version: '2.0'
  title: Watson Assistant v2
  description: >-
    The IBM Watson&trade; Assistant service combines machine learning, natural
    language understanding, and an integrated dialog editor to create
    conversation flows between your apps and your users.


    The Assistant v2 API provides runtime methods your client application can
    use to send user input to an assistant and receive a response.
  x-version-date: '2020-09-24'
  x-sdk-supported-languages:
    - java
    - node
    - python
    - ruby
    - go
    - swift
    - dotnet-standard
    - unity
  x-vcap-service-name: conversation
  x-alternate-name: Assistant
  x-codegen-config:
    includeExternalConfig: true
    supportNodeCallbacks: true
    dotnet-standard:
      apiPackage: IBM.Watson
    go:
      apiPackage: github.com/watson-developer-cloud/go-sdk
    cli:
      apiPackage: cli-watson-plugin
      cliPluginName: watson
    java:
      apiPackage: com.ibm.watson
    python:
      apiPackage: ibm_watson
    swift:
      resterror-alias: WatsonError
      restresponse-alias: WatsonResponse
  x-last-updated: '2020-09-23'
security:
  - IAM: []
externalDocs:
  description: 'For more information about this service, see the docs.'
  url: 'https://cloud.ibm.com/docs/assistant'
  x-information-security: 'https://cloud.ibm.com/docs/assistant?topic=assistant-information-security'
  x-release-notes: 'https://cloud.ibm.com/docs/assistant?topic=assistant-release-notes'
x-doc-properties:
  - assistantAccessControl
  - hasCustomEndpoints
  - hasDataLabels
  - hasPreviousVersion
  - hasRateLimiting
  - hasRelatedApis
  - toolAuthorization
x-rate-limit-enabled: true
tags:
  - name: Sessions
  - name: Message
  - name: Logs
  - name: User data
paths:
  '/v2/assistants/{assistant_id}/sessions/{session_id}/message':
    post:
      operationId: message
      summary: Send user input to assistant (stateful)
      description: >-
        Send user input to an assistant and receive a response, with
        conversation state (including context data) stored by Watson Assistant
        for the duration of the session.
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/AssistantPathParam'
        - $ref: '#/components/parameters/SessionPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        description: >-
          The message to be sent. This includes the user's input, along with
          optional content such as intents and entities.
      x-codegen-request-body-name: request
      responses:
        '200':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              examples:
                response:
                  value:
                    output:
                      generic:
                        - response_type: text
                          text: Hello! What can I do for you?
                      intents:
                        - intent: hello
                          confidence: 0.9281370162963867
                      entities: []
                    context:
                      global:
                        system:
                          turn_count: 1
                        session_id: 55cd47b1-3847-430b-ba28-1739e0654576
                      skills:
                        main skill:
                          system:
                            state: >-
                              eyJzZXNzaW9uX2lkIjoiNTVjZDQ3YjEtMzg0Ny00MzBiLWJhMjgtMTczOWUwNjU0NTc2Iiwic2tpbGxfcmVmZXJlbmNlIjoibWFpbiBza2lsbCIsImFzc2lzdGFudF9pZCI6ImViM2RmZGRlLTJkNDUtNDBmYS05NDZlLTk2ODVmNTU2NzhhOSIsImluaXRpYWxpemVkIjp0cnVlLCJkaWFsb2dfc3RhY2siOlt7ImRpYWxvZ19ub2RlIjoicm9vdCJ9XSwibGFzdF9icmFuY2hfbm9kZSI6ImdyZWV0aW5nX29wdGlvbl8zIn0=
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  source:
                    - >-
                      curl -u "apikey:{apikey}" -X POST -H
                      "Content-Type:application/json" -d "{\"input\": {\"text\":
                      \"Hello\"}}"
                      "{url}/v2/assistants/{assistant_id}/sessions/{session_id}/message?version=2020-04-01"
            - name: Example including context
              example:
                - type: code
                  source:
                    - >-
                      curl -u "apikey:{apikey}" -X POST -H "Content-Type:
                      application/json" -d "{\"input\": {\"text\": \"Hello\",
                      \"options\": {\"return_context\": true}}, \"context\":
                      {\"global\": {\"system\": {\"user_id\": \"my_user_id\"}},
                      \"skills\": {\"main skill\": {\"user_defined\":
                      {\"account_number\": \"123456\"}}}}}"
                      "{url}/v2/assistants/{assistant_id}/sessions/{session_id}/message?version=2020-04-01"
          dotnet-standard:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      IamAuthenticator authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |2
                          );
                    - |+

                    - >
                      AssistantService assistant = new
                      AssistantService("2020-04-01", authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      var result = assistant.Message(
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          sessionId: "{sessionId}",
                    - |2
                          input: new MessageInput()
                    - |2
                          {
                    - |2
                              Text = "Hello"
                    - |2
                          }
                    - |2
                          );
                    - |+

                    - Console.WriteLine(result.Response);
            - name: Example including context
              example:
                - type: code
                  source:
                    - |
                      IamAuthenticator authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |2
                          );
                    - |+

                    - >
                      AssistantService assistant = new
                      AssistantService("2020-04-01", authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      MessageContextSkills skills = new MessageContextSkills();
                    - |
                      MessageContextSkill skill = new MessageContextSkill();
                    - >
                      Dictionary<string, object> userDefinedDictionary = new
                      Dictionary<string, object>();
                    - |+

                    - |
                      userDefinedDictionary.Add("account_number", "123456");
                    - |
                      skill.UserDefined = userDefinedDictionary;
                    - |
                      skills.Add("main skill", skill);
                    - |+

                    - |
                      var result = assistant.Message(
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          sessionId: "{sessionId}",
                    - |2
                          input: new MessageInput()
                    - |2
                          {
                    - |2
                              Text = "Hello"
                    - |2
                          },
                    - |2
                          context: new MessageContext()
                    - |2
                          {
                    - |2
                              Global = new MessageContextGlobal()
                    - |2
                              {
                    - |2
                                  System = new MessageContextGlobalSystem()
                    - |2
                                  {
                    - |2
                                      UserId = "my_user_id"
                    - |2
                                  }
                    - |2
                              },
                    - |2
                              Skills = skills
                    - |2
                          }
                    - |2
                          );
                    - |+

                    - Console.WriteLine(result.Response);
          go:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      package main
                    - |+

                    - |
                      import (
                    - |2
                        "encoding/json"
                    - |2
                        "fmt"
                    - |2
                        "github.com/IBM/go-sdk-core/core"
                    - |2
                        "github.com/watson-developer-cloud/go-sdk/assistantv2"
                    - |
                      )
                    - |+

                    - |
                      func main() {
                    - |2
                        authenticator := &core.IamAuthenticator{
                    - |2
                          ApiKey: "{apikey}",
                    - |2
                        }
                    - |+

                    - |2
                        options := &assistantv2.AssistantV2Options{
                    - |2
                          Version: "2020-04-01",
                    - |2
                          Authenticator: authenticator,
                    - |2
                        }
                    - |+

                    - |2
                        assistant, assistantErr := assistantv2.NewAssistantV2(options)
                    - |+

                    - |2
                        if assistantErr != nil {
                    - |2
                          panic(assistantErr)
                    - |2
                        }
                    - |+

                    - |2
                        assistant.SetServiceURL("{url}")
                    - |+

                    - |2
                        result, response, responseErr := assistant.Message(
                    - |2
                          &assistantv2.MessageOptions{
                    - |2
                            AssistantID: core.StringPtr("{assistant_id}"),
                    - |2
                            SessionID: core.StringPtr("{session_id}"),
                    - |2
                            Input: &assistantv2.MessageInput{
                    - |2
                              MessageType: core.StringPtr("text"),
                    - |2
                              Text: core.StringPtr("Hello"),
                    - |2
                           },
                    - |2
                          },
                    - |2
                        )
                    - |2
                        if responseErr != nil {
                    - |2
                          panic(responseErr)
                    - |2
                        }
                    - |2
                        b, _ := json.MarshalIndent(result, "", "  ")
                    - |2
                        fmt.Println(string(b))
                    - '}'
          java:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      IamAuthenticator authenticator = new
                      IamAuthenticator("{apikey}");
                    - >
                      Assistant assistant = new Assistant("2020-04-01",
                      authenticator);
                    - |
                      assistant.setServiceUrl("{url}");
                    - |+

                    - |
                      MessageInput input = new MessageInput.Builder()
                    - |2
                        .messageType("text")
                    - |2
                        .text("Hello")
                    - |2
                        .build();
                    - |+

                    - >
                      MessageOptions options = new
                      MessageOptions.Builder("{assistant_id}", "{session_id}")
                    - |2
                        .input(input)
                    - |2
                        .build();
                    - |+

                    - >
                      MessageResponse response =
                      assistant.message(options).execute().getResult();
                    - |+

                    - System.out.println(response);
            - name: Example including context
              example:
                - type: code
                  source:
                    - >
                      Authenticator authenticator = new
                      IamAuthenticator("{apikey}");
                    - >
                      Assistant assistant = new Assistant("2020-04-01",
                      authenticator);
                    - |
                      assistant.setServiceUrl("{url}");
                    - |+

                    - >
                      MessageInputOptions inputOptions = new
                      MessageInputOptions.Builder()
                    - |2
                        .returnContext(true)
                    - |2
                        .build();
                    - |+

                    - |
                      MessageInput input = new MessageInput.Builder()
                    - |2
                        .messageType("text")
                    - |2
                        .text("Hello")
                    - |2
                        .options(inputOptions)
                    - |2
                        .build();
                    - |+

                    - >
                      MessageContextGlobalSystem system = new
                      MessageContextGlobalSystem.Builder()
                    - |2
                        .userId("my_user_id")
                    - |2
                        .build();
                    - >
                      MessageContextGlobal globalContext = new
                      MessageContextGlobal.Builder()
                    - |2
                        .system(system)
                    - |2
                        .build();
                    - |+

                    - |
                      Map<String, Object> userDefinedContext = new HashMap<>();
                    - |
                      userDefinedContext.put("account_num","123456");
                    - >
                      MessageContextSkill mainSkillContext = new
                      MessageContextSkill.Builder()
                    - |2
                        .userDefined(userDefinedContext)
                    - |2
                        .build();
                    - >
                      MessageContextSkills skillsContext = new
                      MessageContextSkills();
                    - |
                      skillsContext.put("main skill", mainSkillContext);
                    - |+

                    - |
                      MessageContext context = new MessageContext.Builder()
                    - |2
                        .global(globalContext)
                    - |2
                        .skills(skillsContext)
                    - |2
                        .build();
                    - |+

                    - |
                      MessageOptions options = new MessageOptions.Builder()
                    - |2
                        .assistantId("{assistant_id}")
                    - |2
                        .sessionId("{session_id}")
                    - |2
                        .input(input)
                    - |2
                        .context(context)
                    - |2
                        .build();
                    - |+

                    - >
                      MessageResponse response =
                      service.message(options).execute().getResult();
                    - |+

                    - System.out.println(response);
          node:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      const AssistantV2 = require('ibm-watson/assistant/v2');
                    - |
                      const { IamAuthenticator } = require('ibm-watson/auth');
                    - |+

                    - |
                      const assistant = new AssistantV2({
                    - |2
                        version: '2020-04-01',
                    - |2
                        authenticator: new IamAuthenticator({
                    - |2
                          apikey: '{apikey}',
                    - |2
                        }),
                    - |2
                        serviceUrl: '{url}',
                    - |
                      });
                    - |+

                    - |
                      assistant.message({
                    - |2
                        assistantId: '{assistant_id}',
                    - |2
                        sessionId: '{session_id}',
                    - |2
                        input: {
                    - |2
                          'message_type': 'text',
                    - |2
                          'text': 'Hello'
                    - |2
                          }
                    - |2
                        })
                    - |2
                        .then(res => {
                    - |2
                          console.log(JSON.stringify(res.result, null, 2));
                    - |2
                        })
                    - |2
                        .catch(err => {
                    - |2
                          console.log(err);
                    - '  });'
            - name: Example including context
              example:
                - type: code
                  source:
                    - |
                      const AssistantV2 = require('ibm-watson/assistant/v2');
                    - |
                      const { IamAuthenticator } = require('ibm-watson/auth');
                    - |+

                    - |
                      const assistant = new AssistantV2({
                    - |2
                        version: '2020-04-01',
                    - |2
                        authenticator: new IamAuthenticator({
                    - |2
                          apikey: '{apikey}',
                    - |2
                        }),
                    - |2
                        serviceUrl: '{url}',
                    - |
                      });
                    - |+

                    - |
                      assistant.message({
                    - |2
                        assistantId: '{assistant_id}',
                    - |2
                        sessionId: '{session_id}',
                    - |2
                        input: {
                    - |2
                          'message_type': 'text',
                    - |2
                          'text': 'Hello',
                    - |2
                          'options': {
                    - |2
                            'return_context': true
                    - |2
                          }
                    - |2
                        },
                    - |2
                        context: {
                    - |2
                          'global': {
                    - |2
                            'system': {
                    - |2
                              'user_id': 'my_user_id'
                    - |2
                            }
                    - |2
                          },
                    - |2
                          'skills': {
                    - |2
                            'main skill': {
                    - |2
                              'user_defined': {
                    - |2
                                'account_number': '123456'
                    - |2
                              }
                    - |2
                            }
                    - |2
                          }
                    - |2
                        }
                    - |
                      })
                    - |2
                        .then(res => {
                    - |2
                          console.log(JSON.stringify(res.result, null, 2));
                    - |2
                        })
                    - |2
                        .catch(err => {
                    - |2
                          console.log(err);
                    - '  });'
          python:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      import json
                    - |
                      from ibm_watson import AssistantV2
                    - >
                      from ibm_cloud_sdk_core.authenticators import
                      IAMAuthenticator
                    - |+

                    - |
                      authenticator = IAMAuthenticator('{apikey}')
                    - |
                      assistant = AssistantV2(
                    - |2
                          version='2020-04-01',
                    - |2
                          authenticator = authenticator
                    - |
                      )
                    - |+

                    - |
                      assistant.set_service_url('{url}')
                    - |+

                    - |
                      response = assistant.message(
                    - |2
                          assistant_id='{assistant_id}',
                    - |2
                          session_id='{session_id}',
                    - |2
                          input={
                    - |2
                              'message_type': 'text',
                    - |2
                              'text': 'Hello'
                    - |2
                          }
                    - |
                      ).get_result()
                    - |+

                    - 'print(json.dumps(response, indent=2))'
            - name: Example including context
              example:
                - type: code
                  source:
                    - |
                      import json
                    - |
                      from ibm_watson import AssistantV2
                    - >
                      from ibm_cloud_sdk_core.authenticators import
                      IAMAuthenticator
                    - |+

                    - |
                      authenticator = IAMAuthenticator('{apikey}')
                    - |
                      assistant = AssistantV2(
                    - |2
                          version='2020-04-01',
                    - |2
                          authenticator = authenticator
                    - |
                      )
                    - |+

                    - |
                      assistant.set_service_url('{url}')
                    - |+

                    - |
                      response=assistant.message(
                    - |2
                          assistant_id='{assistant_id}',
                    - |2
                          session_id='{session_id}',
                    - |2
                          input={
                    - |2
                              'message_type': 'text',
                    - |2
                              'text': 'Hello',
                    - |2
                              'options': {
                    - |2
                                  'return_context': True
                    - |2
                              }
                    - |2
                          },
                    - |2
                          context={
                    - |2
                              'global': {
                    - |2
                                  'system': {
                    - |2
                                      'user_id': 'my_user_id'
                    - |2
                                  }
                    - |2
                              },
                    - |2
                              'skills': {
                    - |2
                                  'main skill': {
                    - |2
                                      'user_defined': {
                    - |2
                                          'account_number': '123456'
                    - |2
                                      }
                    - |2
                                  }
                    - |2
                              }
                    - |2
                          }
                    - |
                      ).get_result()
                    - |+

                    - 'print(json.dumps(response, indent=2))'
          ruby:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      require "json"
                    - |
                      require "ibm_watson/authenticators"
                    - |
                      require "ibm_watson/assistant_v2"
                    - |
                      include IBMWatson
                    - |+

                    - |
                      authenticator = Authenticators::IamAuthenticator.new(
                    - |2
                        apikey: "{apikey}"
                    - |
                      )
                    - |+

                    - |
                      assistant = AssistantV2.new(
                    - |2
                        version: "2020-04-01",
                    - |2
                        authenticator: authenticator
                    - |
                      )
                    - |
                      assistant.service_url = "{url}"
                    - |+

                    - |
                      response = assistant.message(
                    - |2
                        assistant_id: "{assistant_id}",
                    - |2
                        session_id: "{session_id}",
                    - |2
                        input: {
                    - |2
                          text: "Hello"
                    - |2
                        }
                    - |
                      )
                    - |+

                    - puts JSON.pretty_generate(response.result)
            - name: Example including context
              example:
                - type: code
                  source:
                    - |
                      require "json"
                    - |
                      require "ibm_watson/authenticators"
                    - |
                      require "ibm_watson/assistant_v2"
                    - |
                      include IBMWatson
                    - |+

                    - |
                      authenticator = Authenticators::IamAuthenticator.new(
                    - |2
                        apikey: "{apikey}"
                    - |
                      )
                    - |+

                    - |
                      assistant = AssistantV2.new(
                    - |2
                        version: "2020-04-01",
                    - |2
                        authenticator: authenticator
                    - |
                      )
                    - |
                      assistant.service_url = "{url}"
                    - |+

                    - |
                      response = assistant.message(
                    - |2
                        assistant_id: "{assistant_id}",
                    - |2
                        session_id: "{session_id}",
                    - |2
                        input: {
                    - |2
                          text: "Hello"
                    - |2
                        },
                    - |2
                        context: {
                    - |2
                          "global": {
                    - |2
                            "system": {
                    - |2
                              "user_id": "my_user_id"
                    - |2
                            }
                    - |2
                          },
                    - |2
                          "skills": {
                    - |2
                            "main skill": {
                    - |2
                              "user_defined": {
                    - |2
                                "account_number": "123456"
                    - |2
                              }
                    - |2
                            }
                    - |2
                          }
                    - |2
                        }
                    - |
                      )
                    - |+

                    - puts JSON.pretty_generate(response.result)
          swift:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      let authenticator = WatsonIAMAuthenticator(apiKey:
                      "{apikey}")
                    - >
                      let assistant = Assistant(version: "2020-04-01",
                      authenticator: authenticator)
                    - |
                      assistant.serviceURL = "{url}"
                    - |+

                    - >
                      let input = MessageInput(messageType: "text", text:
                      "Hello")
                    - |+

                    - >
                      assistant.message(assistantID: "{assistant_id}",
                      sessionID: "{session_id}", input: input) {
                    - |2
                        response, error in
                    - |+

                    - |2
                        guard let message = response?.result else {
                    - |2
                          print(error?.localizedDescription ?? "unknown error")
                    - |2
                          return
                    - |2
                        }
                    - |+

                    - |2
                        print(message)
                    - '}'
          unity:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      var authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |
                      );
                    - |+

                    - |
                      while (!authenticator.CanAuthenticate())
                    - |2
                          yield return null;
                    - |+

                    - >
                      var assistant = new AssistantService("2020-04-01",
                      authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      MessageResponse messageResponse = null;
                    - |
                      assistant.Message(
                    - |2
                          callback: (DetailedResponse<MessageResponse> response, IBMError error) =>
                    - |2
                          {
                    - |2
                              Log.Debug("AssistantV2", "result: {0}", response.Response);
                    - |2
                              messageResponse = response.Result;
                    - |2
                          },
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          sessionId: "{sessionId}",
                    - |2
                          input: new MessageInput()
                    - |2
                          {
                    - |2
                              Text = "Hello"
                    - |2
                          }
                    - |
                      );
                    - |+

                    - |
                      while (messageResponse == null)
                    - '    yield return null;'
            - name: Example including context
              example:
                - type: code
                  source:
                    - |
                      var authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |
                      );
                    - |+

                    - |
                      while (!authenticator.CanAuthenticate())
                    - |2
                          yield return null;
                    - |+

                    - >
                      var assistant = new AssistantService("2020-04-01",
                      authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      MessageContextSkills skills = new MessageContextSkills();
                    - |
                      MessageContextSkill skill = new MessageContextSkill();
                    - |
                      skill.UserDefined.Add("account_number", "123456");
                    - |
                      skills.Add("main skill", skill);
                    - |+

                    - |
                      MessageResponse messageResponse = null;
                    - |
                      assistant.Message(
                    - |2
                          callback: (DetailedResponse<MessageResponse> response, IBMError error) =>
                    - |2
                          {
                    - |2
                              Log.Debug("AssistantV2", "result: {0}", response.Response);
                    - |2
                              messageResponse = response.Result;
                    - |2
                          },
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          sessionId: "{sessionId}",
                    - |2
                          input: new MessageInput()
                    - |2
                          {
                    - |2
                              Text = "Hello"
                    - |2
                          },
                    - |2
                          context: new MessageContext()
                    - |2
                          {
                    - |2
                              Global = new MessageContextGlobal()
                    - |2
                              {
                    - |2
                                  System = new MessageContextGlobalSystem()
                    - |2
                                  {
                    - |2
                                      UserId = "my_user_id"
                    - |2
                                  }
                    - |2
                              },
                    - |2
                              Skills = skills
                    - |2
                          }
                    - |
                      );
                    - |+

                    - |
                      while (messageResponse == null)
                    - '    yield return null;'
  '/v2/assistants/{assistant_id}/message':
    post:
      operationId: messageStateless
      summary: Send user input to assistant (stateless)
      description: >-
        Send user input to an assistant and receive a response, with
        conversation state (including context data) managed by your application.
      tags:
        - Message
      parameters:
        - $ref: '#/components/parameters/AssistantPathParam'
        - $ref: '#/components/parameters/VersionQueryParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequestStateless'
        description: >-
          The message to be sent. This includes the user's input, context data,
          and optional content such as intents and entities.
      x-codegen-request-body-name: request
      responses:
        '200':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseStateless'
              examples:
                response:
                  value:
                    output:
                      intents:
                        - intent: hello
                          confidence: 0.9281370162963867
                      entities: []
                      generic:
                        - response_type: text
                          text: Hello! What can I do for you?
                    context:
                      global:
                        system:
                          turn_count: 1
                        session_id: f7b515ef-9802-431a-8639-cf61fcd0b963
                      skills:
                        main skill:
                          system:
                            state: >-
                              eyJzZXNzaW9uX2lkIjoiZjdiNTE1ZWYtOTgwMi00MzFhLTg2MzktY2Y2MWZjZDBiOTYzIiwic2tpbGxfcmVmZXJlbmNlIjoibWFpbiBza2lsbCIsImFzc2lzdGFudF9pZCI6ImViM2RmZGRlLTJkNDUtNDBmYS05NDZlLTk2ODVmNTU2NzhhOSIsImluaXRpYWxpemVkIjp0cnVlLCJkaWFsb2dfc3RhY2siOlt7ImRpYWxvZ19ub2RlIjoicm9vdCJ9XSwiX25vZGVfb3V0cHV0X21hcCI6eyJub2RlXzJfMTU4OTMwNDc4NDQ5MSI6eyIwIjpbMF19fSwibGFzdF9icmFuY2hfbm9kZSI6Im5vZGVfMl8xNTg5MzA0Nzg0NDkxIn0=
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  source:
                    - >-
                      curl -u "apikey:{apikey}" -X POST -H
                      "Content-Type:application/json" -d "{\"input\": {\"text\":
                      \"Hello\"}}"
                      "{url}/v2/assistants/{assistant_id}/message?version=2020-04-01"
          dotnet-standard:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      IamAuthenticator authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |2
                          );
                    - |+

                    - >
                      AssistantService assistant = new
                      AssistantService("2020-04-01", authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      var result = assistant.MessageStateless(
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          input: new MessageInputStateless()
                    - |2
                          {
                    - |2
                              Text = "Hello"
                    - |2
                          }
                    - |2
                          );
                    - |+

                    - Console.WriteLine(result.Response);
          go:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      package main
                    - |+

                    - |
                      import (
                    - |2
                        "encoding/json"
                    - |2
                        "fmt"
                    - |2
                        "github.com/IBM/go-sdk-core/core"
                    - |2
                        "github.com/watson-developer-cloud/go-sdk/assistantv2"
                    - |
                      )
                    - |+

                    - |
                      func main() {
                    - |2
                        authenticator := &core.IamAuthenticator{
                    - |2
                          ApiKey: "{apikey}",
                    - |2
                        }
                    - |+

                    - |2
                        options := &assistantv2.AssistantV2Options{
                    - |2
                          Version: "2020-04-01",
                    - |2
                          Authenticator: authenticator,
                    - |2
                        }
                    - |+

                    - |2
                        assistant, assistantErr := assistantv2.NewAssistantV2(options)
                    - |+

                    - |2
                        if assistantErr != nil {
                    - |2
                          panic(assistantErr)
                    - |2
                        }
                    - |+

                    - "  assistant.SetServiceURL(\"{url}\")\t\n"
                    - |+

                    - |2
                        result, response, responseErr := assistant.
                    - |2
                          MessageStateless(&assistantv2.MessageStatelessOptions{
                    - |2
                            AssistantID: core.StringPtr("{assistant_id}"),
                    - |2
                            Input: &assistantv2.MessageInputStateless{
                    - |2
                              MessageType: core.StringPtr("text"),
                    - |2
                              Text: core.StringPtr("Hello"),
                    - |2
                            },
                    - |2
                          },
                    - |2
                        )
                    - |+

                    - |2
                        if responseErr != nil {
                    - |2
                          panic(responseErr)
                    - |2
                        }
                    - |+

                    - |2
                        b, _ := json.MarshalIndent(result, "", "  ")
                    - '  fmt.Println(string(b))'
          java:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      IamAuthenticator authenticator = new
                      IamAuthenticator("{apikey}");
                    - >
                      Assistant assistant = new Assistant("2020-04-01",
                      authenticator);
                    - |
                      assistant.setServiceUrl("{url}");
                    - |+

                    - >
                      MessageInputStateless input = new
                      MessageInputStateless.Builder()
                    - |2
                        .messageType("text")
                    - |2
                        .text("Hello")
                    - |2
                        .build();
                    - |+

                    - >
                      MessageStatelessOptions options = new
                      MessageStatelessOptions.Builder()
                    - |2
                        .assistantId("{assistant_id}")
                    - |2
                        .input(input)
                    - |2
                        .build();
                    - |+

                    - >
                      MessageResponseStateless response =
                      assistant.messageStateless(options)
                    - |2
                        .execute()
                    - |2
                        .getResult();
                    - |+

                    - System.out.println(response);
          node:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      const AssistantV2 = require('ibm-watson/assistant/v2');
                    - |
                      const { IamAuthenticator } = require('ibm-watson/auth');
                    - |+

                    - |
                      const assistant = new AssistantV2({
                    - |2
                        version: '2020-04-01',
                    - |2
                        authenticator: new IamAuthenticator({
                    - |2
                          apikey: '{apikey}',
                    - |2
                        }),
                    - |2
                        serviceUrl: '{url}',
                    - |
                      });
                    - |+

                    - |
                      assistant
                    - |2
                        .messageStateless({
                    - |2
                          assistantId: '{assistant_id}',
                    - |2
                          input: {
                    - |2
                            'message_type': 'text',
                    - |2
                            'text': 'Hello',
                    - |2
                          }
                    - |2
                        })
                    - |2
                        .then(res => {
                    - |2
                          console.log(JSON.stringify(res.result, null, 2));
                    - |2
                        })
                    - |2
                        .catch(err => {
                    - |2
                          console.log(err);
                    - |2
                        });
          python:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      import json
                    - |
                      from ibm_watson import AssistantV2
                    - >
                      from ibm_cloud_sdk_core.authenticators import
                      IAMAuthenticator
                    - |+

                    - |
                      authenticator = IAMAuthenticator('{apikey}')
                    - |
                      assistant = AssistantV2(
                    - |2
                          version='2020-04-01',
                    - |2
                          authenticator = authenticator
                    - |
                      )
                    - |+

                    - |
                      assistant.set_service_url('{url}')
                    - |+

                    - |
                      response = assistant.message_stateless(
                    - |2
                          assistant_id='{assistant_id}',
                    - |2
                          input={
                    - |2
                              'message_type': 'text',
                    - |2
                              'text': 'Hello'
                    - |2
                          }
                    - |
                      ).get_result()
                    - |+

                    - 'print(json.dumps(response, indent=2))'
          ruby:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      require "json"
                    - |
                      require "ibm_watson/authenticators"
                    - |
                      require "ibm_watson/assistant_v2"
                    - |
                      include IBMWatson
                    - |+

                    - |
                      authenticator = Authenticators::IamAuthenticator.new(
                    - |2
                        apikey: "{apikey}"
                    - |
                      )
                    - |+

                    - |
                      assistant = AssistantV2.new(
                    - |2
                        version: "2020-04-01",
                    - |2
                        authenticator: authenticator
                    - |
                      )
                    - |
                      assistant.service_url = "{url}"
                    - |+

                    - |
                      response = assistant.message_stateless(
                    - |2
                        assistant_id: "{assistant_id}",
                    - |2
                        input: {
                    - |2
                          text: "Hello"
                    - |2
                        }
                    - |
                      )
                    - |+

                    - puts JSON.pretty_generate(response.result)
          swift:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      let authenticator = WatsonIAMAuthenticator(apiKey:
                      "{apikey}")
                    - >
                      let assistant = Assistant(version: "2020-04-01",
                      authenticator: authenticator)
                    - |
                      assistant.serviceURL = "{url}"
                    - |+

                    - >
                      let input = MessageInputStateless(messageType: "text",
                      text: "Hello")
                    - |+

                    - >
                      assistant.messageStateless(assistantID: "{assistant_id},
                      input: input) {
                    - |2
                          response, error in
                    - |+

                    - |2
                          guard let message = response?.result else {
                    - |2
                              print(error?.localizedDescription ?? "unknown error")
                    - |2
                              return
                    - |2
                          }
                    - |+

                    - |2
                          print(message)
                    - '}'
          unity:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      var authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |
                      );
                    - |+

                    - |
                      while (!authenticator.CanAuthenticate())
                    - |2
                          yield return null;
                    - |+

                    - >
                      var assistant = new AssistantService("2020-04-01",
                      authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      MessageResponseStateless messageResponse = null;
                    - |
                      assistant.MessageStateless(
                    - |2
                          callback: (DetailedResponse<MessageResponseStateless> response, IBMError error) =>
                    - |2
                          {
                    - |2
                              Log.Debug("AssistantV2", "result: {0}", response.Response);
                    - |2
                              messageResponse = response.Result;
                    - |2
                          },
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          input: new MessageInputStateless()
                    - |2
                          {
                    - |2
                              Text = "Hello"
                    - |2
                          }
                    - |
                      );
                    - |+

                    - |
                      while (messageResponse == null)
                    - '    yield return null;'
  '/v2/assistants/{assistant_id}/sessions':
    parameters:
      - $ref: '#/components/parameters/AssistantPathParam'
      - $ref: '#/components/parameters/VersionQueryParam'
    post:
      operationId: createSession
      summary: Create a session
      description: >-
        Create a new session. A session is used to send user input to a skill
        and receive responses. It also maintains the state of the conversation.
        A session persists until it is deleted, or until it times out because of
        inactivity. (For more information, see the
        [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings).
      tags:
        - Sessions
      responses:
        '201':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
              examples:
                response:
                  value:
                    session_id: af11c111-860d-4071-b6d2-550bf20c016e
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  source:
                    - >-
                      curl -u "apikey:{apikey}" -X POST
                      "{url}/v2/assistants/{assistant_id}/sessions?version=2020-04-01"
          dotnet-standard:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      IamAuthenticator authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |2
                          );
                    - |+

                    - >
                      AssistantService assistant = new
                      AssistantService("2020-04-01", authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      var result = assistant.CreateSession(
                    - |2
                          assistantId: "{assistantId}"
                    - |2
                          );
                    - |+

                    - |
                      Console.WriteLine(result.Response);
                    - |+

                    - sessionId = result.Result.SessionId;
          go:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      package main
                    - |+

                    - |
                      import (
                    - |2
                        "encoding/json"
                    - |2
                        "fmt"
                    - |2
                        "github.com/IBM/go-sdk-core/core"
                    - |2
                        "github.com/watson-developer-cloud/go-sdk/assistantv2"
                    - |
                      )
                    - |+

                    - |
                      func main() {
                    - |2
                        authenticator := &core.IamAuthenticator{
                    - |2
                          ApiKey: "{apikey}",
                    - |2
                        }
                    - |+

                    - |2
                        options := &assistantv2.AssistantV2Options{
                    - |2
                          Version: "2020-04-01",
                    - |2
                          Authenticator: authenticator,
                    - |2
                        }
                    - |+

                    - |2
                        assistant, assistantErr := assistantv2.NewAssistantV2(options)
                    - |+

                    - |2
                        if assistantErr != nil {
                    - |2
                          panic(assistantErr)
                    - |2
                        }
                    - |+

                    - |2
                        assistant.SetServiceURL("{url}")
                    - |+

                    - |2
                        result, response, responseErr := assistant.CreateSession(assistant.
                    - |2
                          NewCreateSessionOptions("{assistant_id}"))
                    - |2
                        if responseErr != nil {
                    - |2
                          panic(responseErr)
                    - |2
                        }
                    - |2
                        b, _ := json.MarshalIndent(result, "", "  ")
                    - |2
                        fmt.Println(string(b))
                    - '}'
          java:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      IamAuthenticator authenticator = new
                      IamAuthenticator("{apikey}");
                    - >
                      Assistant assistant = new Assistant("2020-04-01",
                      authenticator);
                    - |
                      assistant.setServiceUrl("{url}");
                    - |+

                    - >
                      CreateSessionOptions options = new
                      CreateSessionOptions.Builder("{assistant_id}").build();
                    - |+

                    - >
                      SessionResponse response =
                      assistant.createSession(options).execute().getResult();
                    - |+

                    - System.out.println(response);
          node:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      const AssistantV2 = require('ibm-watson/assistant/v2');
                    - |
                      const { IamAuthenticator } = require('ibm-watson/auth');
                    - |+

                    - |
                      const assistant = new AssistantV2({
                    - |2
                        version: '2020-04-01',
                    - |2
                        authenticator: new IamAuthenticator({
                    - |2
                          apikey: '{apikey}',
                    - |2
                        }),
                    - |2
                        serviceUrl: '{url}',
                    - |
                      });
                    - |+

                    - |
                      assistant.createSession({
                    - |2
                        assistantId: '{assistant_id}'
                    - |
                      })
                    - |2
                        .then(res => {
                    - |2
                          console.log(JSON.stringify(res.result, null, 2));
                    - |2
                        })
                    - |2
                        .catch(err => {
                    - |2
                          console.log(err);
                    - '  });'
          python:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      import json
                    - |
                      from ibm_watson import AssistantV2
                    - >
                      from ibm_cloud_sdk_core.authenticators import
                      IAMAuthenticator
                    - |+

                    - |
                      authenticator = IAMAuthenticator('{apikey}')
                    - |
                      assistant = AssistantV2(
                    - |2
                          version='2020-04-01',
                    - |2
                          authenticator = authenticator
                    - |
                      )
                    - |+

                    - |
                      assistant.set_service_url('{url}')
                    - |+

                    - |
                      response = assistant.create_session(
                    - |2
                          assistant_id='{assistant_id}'
                    - |
                      ).get_result()
                    - |+

                    - 'print(json.dumps(response, indent=2))'
          ruby:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      require "json"
                    - |
                      require "ibm_watson/authenticators"
                    - |
                      require "ibm_watson/assistant_v2"
                    - |
                      include IBMWatson
                    - |+

                    - |
                      authenticator = Authenticators::IamAuthenticator.new(
                    - |2
                        apikey: "{apikey}"
                    - |
                      )
                    - |+

                    - |
                      assistant = AssistantV2.new(
                    - |2
                        version: "2020-04-01",
                    - |2
                        authenticator: authenticator
                    - |
                      )
                    - |
                      assistant.service_url = "{url}"
                    - |+

                    - |
                      response = assistant.create_session(
                    - |2
                        assistant_id: "{assistant_id}"
                    - |
                      )
                    - |+

                    - puts JSON.pretty_generate(response.result)
          swift:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      let authenticator = WatsonIAMAuthenticator(apiKey:
                      "{apikey}")
                    - >
                      let assistant = Assistant(version: "2020-04-01",
                      authenticator: authenticator)
                    - |
                      assistant.serviceURL = "{url}"
                    - |+

                    - |
                      assistant.createSession(assistantID: "{assistant_id}") {
                    - |2
                        response, error in
                    - |+

                    - |2
                        guard let session = response?.result else {
                    - |2
                          print(error?.localizedDescription ?? "unknown error")
                    - |2
                          return
                    - |2
                        }
                    - |+

                    - |2
                        sessionID = session.sessionID
                    - |2
                        print(session)
                    - '}'
          unity:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      var authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |
                      );
                    - |+

                    - |
                      while (!authenticator.CanAuthenticate())
                    - |2
                          yield return null;
                    - |+

                    - >
                      var assistant = new AssistantService("2020-04-01",
                      authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      SessionResponse createSessionResponse = null;
                    - |
                      assistant.CreateSession(
                    - |2
                          callback: (DetailedResponse<SessionResponse> response, IBMError error) =>
                    - |2
                          {
                    - |2
                              Log.Debug("AssistantV2", "result: {0}", response.Response);
                    - |2
                              createSessionResponse = response.Result;
                    - |2
                          },
                    - |2
                          assistantId: "{assistantId}"
                    - |
                      );
                    - |+

                    - |
                      while (createSessionResponse == null)
                    - '    yield return null;'
  '/v2/assistants/{assistant_id}/sessions/{session_id}':
    parameters:
      - $ref: '#/components/parameters/AssistantPathParam'
      - $ref: '#/components/parameters/VersionQueryParam'
      - $ref: '#/components/parameters/SessionPathParam'
    delete:
      operationId: deleteSession
      summary: Delete session
      description: >-
        Deletes a session explicitly before it times out. (For more information
        about the session inactivity timeout, see the
        [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings)).
      tags:
        - Sessions
      responses:
        '200':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  source:
                    - >-
                      curl -u "apikey:{apikey}" -X DELETE
                      "{url}/v2/assistants/{assistant_id}/sessions/{session_id}?version=2020-04-01"
          dotnet-standard:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      IamAuthenticator authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |2
                          );
                    - |+

                    - >
                      AssistantService assistant = new
                      AssistantService("2020-04-01", authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      var result = assistant.DeleteSession(
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          sessionId: "{sessionId}"
                    - |2
                          );
                    - |+

                    - Console.WriteLine(result.Response);
          go:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      package main
                    - |+

                    - |
                      import (
                    - |2
                        "github.com/IBM/go-sdk-core/core"
                    - |2
                        "github.com/watson-developer-cloud/go-sdk/assistantv2"
                    - |
                      )
                    - |+

                    - |
                      func main() {
                    - |2
                        authenticator := &core.IamAuthenticator{
                    - |2
                          ApiKey: "{apikey}",
                    - |2
                        }
                    - |+

                    - |2
                        options := &assistantv2.AssistantV2Options{
                    - |2
                          Version: "2020-04-01",
                    - |2
                          Authenticator: authenticator,
                    - |2
                        }
                    - |+

                    - |2
                        assistant, assistantErr := assistantv2.NewAssistantV2(options)
                    - |+

                    - |2
                        if assistantErr != nil {
                    - |2
                          panic(assistantErr)
                    - |2
                        }
                    - |+

                    - |2
                        assistant.SetServiceURL("{url}")
                    - |+

                    - |2
                        _, responseErr := assistant.DeleteSession(assistant.
                    - |2
                          NewDeleteSessionOptions("{assistant_id}", "{session_id}"))
                    - |2
                        if responseErr != nil {
                    - |2
                          panic(responseErr)
                    - |2
                        }
                    - '}'
          java:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      IamAuthenticator authenticator = new
                      IamAuthenticator("{apikey}");
                    - >
                      Assistant assistant = new Assistant("2020-04-01",
                      authenticator);
                    - |
                      assistant.setServiceUrl("{url}");
                    - |+

                    - >
                      DeleteSessionOptions options = new
                      DeleteSessionOptions.Builder("{assistant_id}",
                      "{session_id}").build();
                    - |+

                    - assistant.deleteSession(options).execute();
          node:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      const AssistantV2 = require('ibm-watson/assistant/v2');
                    - |
                      const { IamAuthenticator } = require('ibm-watson/auth');
                    - |+

                    - |
                      const assistant = new AssistantV2({
                    - |2
                        version: '2020-04-01',
                    - |2
                        authenticator: new IamAuthenticator({
                    - |2
                          apikey: '{apikey}',
                    - |2
                        }),
                    - |2
                        serviceUrl: '{url}',
                    - |
                      });
                    - |+

                    - |
                      assistant.deleteSession({
                    - |2
                        assistantId: '{assistant_id}',
                    - |2
                        sessionId: '{session_id}',
                    - |
                      })
                    - |2
                        .then(res => {
                    - |2
                          console.log(JSON.stringify(res.result, null, 2));
                    - |2
                        })
                    - |2
                        .catch(err => {
                    - |2
                          console.log(err);
                    - '  });'
          python:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      import json
                    - |
                      from ibm_watson import AssistantV2
                    - >
                      from ibm_cloud_sdk_core.authenticators import
                      IAMAuthenticator
                    - |+

                    - |
                      authenticator = IAMAuthenticator('{apikey}')
                    - |
                      assistant = AssistantV2(
                    - |2
                          version='2020-04-01',
                    - |2
                          authenticator = authenticator
                    - |
                      )
                    - |+

                    - |
                      assistant.set_service_url('{url}')
                    - |+

                    - |
                      response = assistant.delete_session(
                    - |2
                          assistant_id='{assistant_id}',
                    - |2
                          session_id='{session_id}'
                    - |
                      ).get_result()
                    - |+

                    - 'print(json.dumps(response, indent=2))'
          ruby:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      require "json"
                    - |
                      require "ibm_watson/authenticators"
                    - |
                      require "ibm_watson/assistant_v2"
                    - |
                      include IBMWatson
                    - |+

                    - |
                      authenticator = Authenticators::IamAuthenticator.new(
                    - |2
                        apikey: "{apikey}"
                    - |
                      )
                    - |+

                    - |
                      assistant = AssistantV2.new(
                    - |2
                        version: "2020-04-01",
                    - |2
                        authenticator: authenticator
                    - |
                      )
                    - |
                      assistant.service_url = "{url}"
                    - |+

                    - |
                      response = assistant.delete_session(
                    - |2
                        assistant_id: "{assistant_id}",
                    - |2
                        session_id: "{session_id}"
                    - )
          swift:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      let authenticator = WatsonIAMAuthenticator(apiKey:
                      "{apikey}")
                    - >
                      let assistant = Assistant(version: "2020-04-01",
                      authenticator: authenticator)
                    - |
                      assistant.serviceURL = "{url}"
                    - |+

                    - >
                      assistant.deleteSession(assistantID: "{assistant_id}",
                      sessionID: "{session_id}") {
                    - |2
                        _, error in
                    - |+

                    - |2
                        if let error = error {
                    - |2
                          print(error.localizedDescription)
                    - |2
                          return
                    - |2
                        }
                    - |+

                    - |2
                        print("session deleted")
                    - '}'
          unity:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      var authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |
                      );
                    - |+

                    - |
                      while (!authenticator.CanAuthenticate())
                    - |2
                          yield return null;
                    - |+

                    - >
                      var assistant = new AssistantService("2020-04-01",
                      authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      assistant.DeleteSession(
                    - |2
                          callback: (DetailedResponse<object> response, IBMError error) =>
                    - |2
                          {
                    - |2
                              Log.Debug("AssistantV2", "result: {0}", response.Response);
                    - |2
                              deleteSessionResponse = response.Result;
                    - |2
                          },
                    - |2
                          assistantId: "{assistantId}",
                    - |2
                          sessionId: "{sessionId}"
                    - );
  '/v2/assistants/{assistant_id}/logs':
    parameters:
      - $ref: '#/components/parameters/AssistantPathParam'
      - $ref: '#/components/parameters/VersionQueryParam'
    get:
      operationId: listLogs
      summary: List log events for an assistant
      description: |-
        List the events from the log of an assistant.

        This method is available only with Premium plans.
      x-rate-limit: >-
        If **cursor** is not specified, this operation is limited to 40 requests
        per 30 minutes. If **cursor** is specified, the limit is 120 requests
        per minute.
      tags:
        - Logs
      parameters:
        - $ref: '#/components/parameters/LogSortQueryParam'
        - in: query
          name: filter
          required: false
          description: >-
            A cacheable parameter that limits the results to those matching the
            specified filter. For more information, see the
            [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).
          schema:
            type: string
        - $ref: '#/components/parameters/PageLimitQueryParam'
        - $ref: '#/components/parameters/CursorQueryParam'
      responses:
        '200':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogCollection'
              examples:
                response:
                  value: {}
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  source:
                    - >-
                      curl -u "apikey:{apikey}"
                      "{url}/v2/assistants/{assistant_id}/logs?version=2020-04-01"
          dotnet-standard:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      IamAuthenticator authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |2
                          );
                    - |+

                    - >
                      AssistantService assistant = new
                      AssistantService("2020-04-01", authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      var result = assistant.ListLogs(
                    - |2
                          assistantId: "{assistantId}"
                    - |2
                          );
                    - |+

                    - Console.WriteLine(result.Response);
          go:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      package main
                    - |+

                    - |
                      import (
                    - |2
                        "encoding/json"
                    - |2
                        "fmt"
                    - |2
                        "github.com/IBM/go-sdk-core/core"
                    - |2
                        "github.com/watson-developer-cloud/go-sdk/assistantv2"
                    - |
                      )
                    - |+

                    - |
                      func main() {
                    - |2
                        authenticator := &core.IamAuthenticator{
                    - |2
                          ApiKey: "{apikey}",
                    - |2
                        }
                    - |+

                    - |2
                        options := &assistantv2.AssistantV2Options{
                    - |2
                          Version: "2020-04-01",
                    - |2
                          Authenticator: authenticator,
                    - |2
                        }
                    - |+

                    - |2
                        assistant, assistantErr := assistantv2.NewAssistantV2(options)
                    - |+

                    - |2
                        if assistantErr != nil {
                    - |2
                          panic(assistantErr)
                    - |2
                        }
                    - |+

                    - |2
                        assistant.SetServiceURL("{url}")
                    - |+

                    - |2
                        result, response, responseErr := assistant.ListLogs(
                    - |2
                          &assistantv2.ListLogsOptions{
                    - |2
                            AssistantID: core.StringPtr("{assistant_id}"),
                    - |2
                         },
                    - |2
                        )
                    - |2
                        if responseErr != nil {
                    - |2
                          panic(responseErr)
                    - |2
                        }
                    - |2
                        b, _ := json.MarshalIndent(result, "", "  ")
                    - |2
                        fmt.Println(string(b))
                    - '}'
          java:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      IamAuthenticator authenticator = new
                      IamAuthenticator("{apikey}");
                    - >
                      Assistant assistant = new Assistant("2020-04-01",
                      authenticator);
                    - |
                      assistant.setServiceUrl("{url}");
                    - |+

                    - |
                      String assistantId = "{assistant_id}";
                    - |+

                    - >
                      ListLogsOptions options = new
                      ListLogsOptions.Builder(assistantId).build();
                    - |+

                    - >
                      LogCollection response =
                      assistant.listLogs(options).execute().getResult();
                    - |+

                    - System.out.println(response);
          node:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      const AssistantV2 = require('ibm-watson/assistant/v2');
                    - |
                      const { IamAuthenticator } = require('ibm-watson/auth');
                    - |+

                    - |
                      const assistant = new AssistantV2({
                    - |2
                        version: '2020-04-01',
                    - |2
                        authenticator: new IamAuthenticator({
                    - |2
                          apikey: '{apikey}',
                    - |2
                        }),
                    - |2
                        serviceUrl: '{url}',
                    - |
                      });
                    - |+

                    - |
                      const params = {
                    - |2
                        assistantId: '{assistant_id}'
                    - |
                      };
                    - |+

                    - |
                      assistant.listLogs(params)
                    - |2
                        .then(res => {
                    - |2
                          console.log(JSON.stringify(res.result, null, 2));
                    - |2
                        })
                    - |2
                        .catch(err => {
                    - |2
                          console.log(err)
                    - '  });'
          python:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      import json
                    - |
                      from ibm_watson import AssistantV2
                    - >
                      from ibm_cloud_sdk_core.authenticators import
                      IAMAuthenticator
                    - |+

                    - |
                      authenticator = IAMAuthenticator('{apikey}')
                    - |
                      assistant = AssistantV2(
                    - |2
                          version='2020-04-01',
                    - |2
                          authenticator = authenticator
                    - |
                      )
                    - |+

                    - |
                      assistant.set_service_url('{url}')
                    - |+

                    - |
                      response=assistant.list_logs(
                    - |2
                          assistant_id='{assistant_id}'
                    - |
                      ).get_result()
                    - |+

                    - 'print(json.dumps(response, indent=2))'
          ruby:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      require "json"
                    - |
                      require "ibm_watson/authenticators"
                    - |
                      require "ibm_watson/assistant_v2"
                    - |
                      include IBMWatson
                    - |+

                    - |
                      authenticator = Authenticators::IamAuthenticator.new(
                    - |2
                        apikey: "{apikey}"
                    - |
                      )
                    - |+

                    - |
                      assistant = AssistantV2.new(
                    - |2
                        version: "2020-04-01",
                    - |2
                        authenticator: authenticator
                    - |
                      )
                    - |
                      assistant.service_url = "{url}"
                    - |+

                    - |
                      response = assistant.list_logs(
                    - |2
                        assistant_id: "{assistant_id}"
                    - |
                      )
                    - |+

                    - puts JSON.pretty_generate(response.result)
          swift:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      let authenticator = WatsonIAMAuthenticator(apiKey:
                      "{apikey}")
                    - >
                      let assistant = Assistant(version: "2020-04-01",
                      authenticator: authenticator)
                    - |
                      assistant.serviceURL = "{url}"
                    - |+

                    - |
                      assistant.listLogs(assistantID: "{assistant_id}") {
                    - |2
                        response, error in
                    - |+

                    - |2
                        guard let logs = response?.result else {
                    - |2
                          print(error?.localizedDescription ?? "unknown error")
                    - |2
                          return
                    - |2
                        }
                    - |+

                    - |2
                        print(logs)
                    - '}'
          unity:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      var authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |
                      );
                    - |+

                    - |
                      while (!authenticator.CanAuthenticate())
                    - |2
                          yield return null;
                    - |+

                    - >
                      var assistant = new AssistantService("2020-04-01",
                      authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      LogCollection listLogsResponse = null;
                    - |
                      assistant.ListLogs(
                    - |2
                          callback: (DetailedResponse<LogCollection> response, IBMError error) =>
                    - |2
                          {
                    - |2
                              Log.Debug("AssistantServiceV2", "ListLogs result: {0}", response.Response);
                    - |2
                              listLogsResponse = response.Result;
                    - |2
                          },
                    - |2
                          assistantId: "{assistant_id}"
                    - |
                      );
                    - |+

                    - |
                      while (listLogsResponse == null)
                    - '    yield return null;'
  /v2/user_data:
    parameters:
      - $ref: '#/components/parameters/VersionQueryParam'
    delete:
      operationId: deleteUserData
      summary: Delete labeled data
      description: >-
        Deletes all data associated with a specified customer ID. The method has
        no effect if no data is associated with the customer ID. 


        You associate a customer ID with data by passing the `X-Watson-Metadata`
        header with a request that passes data. For more information about
        personal data and customer IDs, see [Information
        security](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security).


        This operation is limited to 4 requests per minute. For more
        information, see **Rate limiting**.
      x-rate-limit: This operation is limited to 4 requests per minute.
      tags:
        - User data
      parameters:
        - in: query
          name: customer_id
          required: true
          description: The customer ID for which all data is to be deleted.
          schema:
            type: string
      responses:
        '202':
          description: The request to delete data was successfully submitted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: |-
            **Bad Request**. The request did not pass a customer ID:
            * `No customer ID found in the request`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  source:
                    - >-
                      curl -X DELETE -u "apikey:{apikey}"
                      "{url}/v2/user_data?customer_id={id}&version=2020-04-01"
          dotnet-standard:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      IamAuthenticator authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |2
                          );
                    - |+

                    - >
                      AssistantService assistant = new
                      AssistantService("2020-04-01", authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      var result = assistant.DeleteUserData(
                    - |2
                          customerId: "{id}"
                    - |2
                          );
                    - |+

                    - Console.WriteLine(result.Response);
          go:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      package main
                    - |+

                    - |
                      import (
                    - |2
                        "github.com/IBM/go-sdk-core/core"
                    - |2
                        "github.com/watson-developer-cloud/go-sdk/assistantv2"
                    - |
                      )
                    - |+

                    - |
                      func main() {
                    - |2
                        authenticator := &core.IamAuthenticator{
                    - |2
                          ApiKey: "{apikey}",
                    - |2
                        }
                    - |+

                    - |2
                        options := &assistantv2.AssistantV2Options{
                    - |2
                          Version: "2020-04-01",
                    - |2
                          Authenticator: authenticator,
                    - |2
                        }
                    - |+

                    - |2
                        assistant, assistantErr := assistantv2.NewAssistantV2(options)
                    - |+

                    - |2
                        if assistantErr != nil {
                    - |2
                          panic(assistantErr)
                    - |2
                        }
                    - |+

                    - |2
                        assistant.SetServiceURL("{url}")
                    - |+

                    - |2
                        _, responseErr := assistant.DeleteUserData(
                    - |2
                          &assistantv2.DeleteUserDataOptions{
                    - |2
                            CustomerID: core.StringPtr("{id}"),
                    - |2
                         },
                    - |2
                        )
                    - |2
                        if responseErr != nil {
                    - |2
                          panic(responseErr)
                    - |2
                        }
                    - '}'
          java:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      IamAuthenticator authenticator = new
                      IamAuthenticator("{apikey}");
                    - >
                      Assistant assistant = new Assistant("2020-04-01",
                      authenticator);
                    - |
                      assistant.setServiceUrl("{url}");
                    - |+

                    - |
                      String customerId = "{id}";
                    - |+

                    - >
                      DeleteUserDataOptions options = new
                      DeleteUserDataOptions.Builder(customerId).build();
                    - |+

                    - assistant.deleteUserData(options).execute();
          node:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      const AssistantV2 = require('ibm-watson/assistant/v2');
                    - |
                      const { IamAuthenticator } = require('ibm-watson/auth');
                    - |+

                    - |
                      const assistant = new AssistantV2({
                    - |2
                        version: '2020-04-01',
                    - |2
                        authenticator: new IamAuthenticator({
                    - |2
                          apikey: '{apikey}',
                    - |2
                        }),
                    - |2
                        serviceUrl: '{url}',
                    - |
                      });
                    - |+

                    - |
                      const params = {
                    - |2
                        customerId: '{id}'
                    - |
                      };
                    - |+

                    - |
                      assistant.deleteUserData(params)
                    - |2
                        .then(res => {
                    - |2
                          console.log(JSON.stringify(res.result, null, 2));
                    - |2
                        })
                    - |2
                        .catch(err => {
                    - |2
                          console.log(err)
                    - '  });'
          python:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      import json
                    - |
                      from ibm_watson import AssistantV2
                    - >
                      from ibm_cloud_sdk_core.authenticators import
                      IAMAuthenticator
                    - |+

                    - |
                      authenticator = IAMAuthenticator('{apikey}')
                    - |
                      assistant = AssistantV2(
                    - |2
                          version='2020-04-01',
                    - |2
                          authenticator = authenticator
                    - |
                      )
                    - |+

                    - |
                      assistant.set_service_url('{url}')
                    - |+

                    - |
                      response = assistant.delete_user_data(
                    - |2
                          customer_id = '{id}'
                    - |
                      ).get_result()
                    - |+

                    - 'print(json.dumps(response, indent=2))'
          ruby:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      require "json"
                    - |
                      require "ibm_watson/authenticators"
                    - |
                      require "ibm_watson/assistant_v2"
                    - |
                      include IBMWatson
                    - |+

                    - |
                      authenticator = Authenticators::IamAuthenticator.new(
                    - |2
                        apikey: "{apikey}"
                    - |
                      )
                    - |+

                    - |
                      assistant = AssistantV2.new(
                    - |2
                        version: "2020-04-01",
                    - |2
                        authenticator: authenticator
                    - |
                      )
                    - |
                      assistant.service_url = "{url}"
                    - |+

                    - |
                      response = assistant.delete_user_data(
                    - |2
                        customer_id: "{id}"
                    - )
          swift:
            - name: Example request
              example:
                - type: code
                  source:
                    - >
                      let authenticator = WatsonIAMAuthenticator(apiKey:
                      "{apikey}")
                    - >
                      let assistant = Assistant(version: "2020-04-01",
                      authenticator: authenticator)
                    - |
                      assistant.serviceURL = "{url}"
                    - |+

                    - |
                      assistant.deleteUserData(customerID: "{id}") {
                    - |2
                        _, error in
                    - |+

                    - |2
                        if let error = error {
                    - |2
                          print(error.localizedDescription)
                    - |2
                          return
                    - |2
                        }
                    - |+

                    - |2
                        print("delete request submitted")
                    - '}'
          unity:
            - name: Example request
              example:
                - type: code
                  source:
                    - |
                      var authenticator = new IamAuthenticator(
                    - |2
                          apikey: "{apikey}"
                    - |
                      );
                    - |+

                    - |
                      while (!authenticator.CanAuthenticate())
                    - |2
                          yield return null;
                    - |+

                    - >
                      var assistant = new AssistantService("2020-04-01",
                      authenticator);
                    - |
                      assistant.SetServiceUrl("{url}");
                    - |+

                    - |
                      object deleteUserDataResponse = null;
                    - |
                      assistant.DeleteUserData(
                    - |2
                          callback: (DetailedResponse<object> response, IBMError error) =>
                    - |2
                          {
                    - |2
                              Log.Debug("AssistantServiceV2", "DeleteUserData result: {0}", response.Response);
                    - |2
                              deleteUserDataResponse = response.Result;
                    - |2
                          },
                    - |2
                          customerId: "{id}"
                    - |
                      );
                    - |+

                    - |
                      while (deleteUserDataResponse == null)
                    - '    yield return null;'
servers:
  - url: 'https://api.us-south.assistant.watson.cloud.ibm.com'
    description: Dallas
components:
  parameters:
    AssistantPathParam:
      in: path
      name: assistant_id
      required: true
      description: >-
        Unique identifier of the assistant. To find the assistant ID in the
        Watson Assistant user interface, open the assistant settings and click
        **API Details**. For information about creating assistants, see the
        [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-add#assistant-add-task).


        **Note:** Currently, the v2 API does not support creating assistants.
      schema:
        type: string
    CursorQueryParam:
      in: query
      name: cursor
      required: false
      description: A token identifying the page of results to retrieve.
      schema:
        type: string
    LogSortQueryParam:
      in: query
      name: sort
      required: false
      description: >-
        How to sort the returned log events. You can sort by
        **request_timestamp**. To reverse the sort order, prefix the parameter
        value with a minus sign (`-`).
      schema:
        type: string
    PageLimitQueryParam:
      in: query
      name: page_limit
      required: false
      description: The number of records to return in each page of results.
      schema:
        type: integer
        default: 100
    SessionPathParam:
      in: path
      name: session_id
      required: true
      description: Unique identifier of the session.
      schema:
        type: string
    VersionQueryParam:
      in: query
      name: version
      required: true
      description: >-
        Release date of the API version you want to use. Specify dates in
        YYYY-MM-DD format. The current version is `2020-04-01`.
      schema:
        type: string
  securitySchemes:
    IAM:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    BaseMessageContextGlobal:
      type: object
      description: Session context data that is shared by all skills used by the Assistant.
      properties:
        system:
          $ref: '#/components/schemas/MessageContextGlobalSystem'
    BaseMessageInput:
      type: object
      description: An input object that includes the input text.
      properties:
        message_type:
          type: string
          enum:
            - text
          description: 'The type of user input. Currently, only text input is supported.'
          default: text
        text:
          type: string
          minLength: 1
          maxLength: 2048
          description: >-
            The text of the user input. This string cannot contain carriage
            return, newline, or tab characters.
        intents:
          type: array
          description: >-
            Intents to use when evaluating the user input. Include intents from
            the previous response to continue using those intents rather than
            trying to recognize intents in the new input.
          items:
            $ref: '#/components/schemas/RuntimeIntent'
          x-item-name: intent
        entities:
          type: array
          description: >-
            Entities to use when evaluating the message. Include entities from
            the previous response to continue using those entities rather than
            detecting entities in the new input.
          items:
            $ref: '#/components/schemas/RuntimeEntity'
          x-item-name: entity
        suggestion_id:
          type: string
          description: For internal use only.
    BaseMessageInputOptions:
      type: object
      description: Optional properties that control how the assistant responds.
      properties:
        restart:
          type: boolean
          description: >-
            Whether to restart dialog processing at the root of the dialog,
            regardless of any previously visited nodes. **Note:** This does not
            affect `turn_count` or any other context variables.
          default: false
        alternate_intents:
          type: boolean
          description: >-
            Whether to return more than one intent. Set to `true` to return all
            matching intents.
          default: false
        spelling:
          $ref: '#/components/schemas/MessageInputOptionsSpelling'
        auto_learn:
          $ref: '#/components/schemas/MessageInputOptionsAutoLearn'
    DialogLogMessage:
      type: object
      description: Dialog log message details.
      properties:
        level:
          type: string
          description: The severity of the log message.
          enum:
            - info
            - error
            - warn
        message:
          type: string
          description: The text of the log message.
      required:
        - level
        - message
    DialogNodeAction:
      properties:
        name:
          type: string
          description: The name of the action.
        type:
          type: string
          enum:
            - client
            - server
            - web-action
            - cloud-function
          default: client
          description: The type of action to invoke.
        parameters:
          type: object
          description: A map of key/value pairs to be provided to the action.
          additionalProperties: true
        result_variable:
          type: string
          description: >-
            The location in the dialog context where the result of the action is
            stored.
        credentials:
          type: string
          description: >-
            The name of the context variable that the client application will
            use to pass in credentials for the action.
      required:
        - name
        - result_variable
    DialogNodeOutputOptionsElement:
      properties:
        label:
          type: string
          description: The user-facing label for the option.
        value:
          $ref: '#/components/schemas/DialogNodeOutputOptionsElementValue'
      required:
        - label
        - value
    DialogNodeOutputOptionsElementValue:
      properties:
        input:
          $ref: '#/components/schemas/MessageInput'
      description: >-
        An object defining the message input to be sent to the assistant if the
        user selects the corresponding option.
    DialogSuggestion:
      properties:
        label:
          type: string
          description: >-
            The user-facing label for the suggestion. This label is taken from
            the **title** or **user_label** property of the corresponding dialog
            node, depending on the disambiguation options.
        value:
          $ref: '#/components/schemas/DialogSuggestionValue'
        output:
          type: object
          description: >-
            The dialog output that will be returned from the Watson Assistant
            service if the user selects the corresponding option.
          additionalProperties: true
      required:
        - label
        - value
    DialogSuggestionValue:
      properties:
        input:
          $ref: '#/components/schemas/MessageInput'
      description: >-
        An object defining the message input to be sent to the assistant if the
        user selects the corresponding disambiguation option.
    EmptyResponse:
      properties: {}
    ErrorDetail:
      properties:
        message:
          type: string
          description: Description of a specific constraint violation.
        path:
          type: string
          description: The location of the constraint violation.
      required:
        - message
    ErrorResponse:
      properties:
        error:
          type: string
          description: General description of an error.
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
          description: >-
            Collection of specific constraint violations associated with the
            error.
        code:
          type: integer
          description: HTTP status code for the error response.
      required:
        - error
        - code
    Log:
      properties:
        log_id:
          type: string
          description: A unique identifier for the logged event.
        request:
          $ref: '#/components/schemas/MessageRequest'
        response:
          $ref: '#/components/schemas/MessageResponse'
        assistant_id:
          type: string
          description: Unique identifier of the assistant.
        session_id:
          type: string
          description: The ID of the session the message was part of.
        skill_id:
          type: string
          description: The unique identifier of the skill that responded to the message.
        snapshot:
          type: string
          description: >-
            The name of the snapshot (dialog skill version) that responded to
            the message (for example, `draft`).
        request_timestamp:
          type: string
          description: The timestamp for receipt of the message.
        response_timestamp:
          type: string
          description: The timestamp for the system response to the message.
        language:
          type: string
          description: The language of the assistant to which the message request was made.
        customer_id:
          type: string
          description: 'The customer ID specified for the message, if any.'
      required:
        - log_id
        - request
        - response
        - assistant_id
        - session_id
        - skill_id
        - snapshot
        - request_timestamp
        - response_timestamp
        - language
    LogCollection:
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Log'
          description: An array of objects describing log events.
        pagination:
          $ref: '#/components/schemas/LogPagination'
      required:
        - logs
        - pagination
    LogPagination:
      description: The pagination data for the returned objects.
      properties:
        next_url:
          type: string
          description: 'The URL that will return the next page of results, if any.'
        matched:
          type: integer
          description: Reserved for future use.
        next_cursor:
          type: string
          description: A token identifying the next page of results.
    MessageContext:
      type: object
      properties:
        global:
          $ref: '#/components/schemas/MessageContextGlobal'
        skills:
          $ref: '#/components/schemas/MessageContextSkills'
    MessageContextStateless:
      type: object
      properties:
        global:
          $ref: '#/components/schemas/MessageContextGlobalStateless'
        skills:
          $ref: '#/components/schemas/MessageContextSkills'
    MessageContextGlobal:
      allOf:
        - $ref: '#/components/schemas/BaseMessageContextGlobal'
        - properties:
            session_id:
              type: string
              description: The session ID.
              readOnly: true
    MessageContextGlobalStateless:
      allOf:
        - $ref: '#/components/schemas/BaseMessageContextGlobal'
        - properties:
            session_id:
              type: string
              description: The unique identifier of the session.
    MessageContextGlobalSystem:
      type: object
      description: >-
        Built-in system properties that apply to all skills used by the
        assistant.
      properties:
        timezone:
          description: >-
            The user time zone. The assistant uses the time zone to correctly
            resolve relative time references.
          type: string
        user_id:
          description: >-
            A string value that identifies the user who is interacting with the
            assistant. The client must provide a unique identifier for each
            individual end user who accesses the application. For Plus and
            Premium plans, this user ID is used to identify unique users for
            billing purposes. This string cannot contain carriage return,
            newline, or tab characters.
          type: string
          minLength: 1
          maxLength: 256
        turn_count:
          type: integer
          description: >-
            A counter that is automatically incremented with each turn of the
            conversation. A value of 1 indicates that this is the the first turn
            of a new conversation, which can affect the behavior of some skills
            (for example, triggering the start node of a dialog).
        locale:
          description: >-
            The language code for localization in the user input. The specified
            locale overrides the default for the assistant, and is used for
            interpreting entity values in user input such as date values. For
            example, `04/03/2018` might be interpreted either as April 3 or
            March 4, depending on the locale.

             This property is included only if the new system entities are enabled for the skill.
          type: string
          enum:
            - en-us
            - en-ca
            - en-gb
            - ar-ar
            - cs-cz
            - de-de
            - es-es
            - fr-fr
            - it-it
            - ja-jp
            - ko-kr
            - nl-nl
            - pt-br
            - zh-cn
            - zh-tw
        reference_time:
          description: >-
            The base time for interpreting any relative time mentions in the
            user input. The specified time overrides the current server time,
            and is used to calculate times mentioned in relative terms such as
            `now` or `tomorrow`. This can be useful for simulating past or
            future times for testing purposes, or when analyzing documents such
            as news articles.


            This value must be a UTC time value formatted according to ISO 8601
            (for example, `2019-06-26T12:00:00Z` for noon on 26 June 2019.


            This property is included only if the new system entities are
            enabled for the skill.
          type: string
    MessageContextSkill:
      type: object
      description: >-
        Contains information specific to a particular skill used by the
        Assistant. The property name must be the same as the name of the skill
        (for example, `main skill`).
      properties:
        user_defined:
          description: >-
            Arbitrary variables that can be read and written by a particular
            skill.
          type: object
          additionalProperties:
            type: object
        system:
          type: object
          description: System context data used by the skill.
          additionalProperties:
            description: For internal use only.
          properties:
            state:
              type: string
              description: >-
                An encoded string representing the current conversation state.
                By saving this value and then sending it in the context of a
                subsequent message request, you can restore the conversation to
                the same state. This can be useful if you need to return to an
                earlier point in the conversation. If you are using stateful
                sessions, you can also use a stored state value to restore a
                paused conversation whose session has expired.
              x-sdk-exclude: true
    MessageContextSkills:
      type: object
      description: >-
        Information specific to particular skills used by the assistant.


        **Note:** Currently, only a single child property is supported,
        containing variables that apply to the dialog skill used by the
        assistant.
      additionalProperties:
        $ref: '#/components/schemas/MessageContextSkill'
    MessageInput:
      allOf:
        - $ref: '#/components/schemas/BaseMessageInput'
        - properties:
            options:
              $ref: '#/components/schemas/MessageInputOptions'
      x-java-builder: true
    MessageInputOptions:
      allOf:
        - $ref: '#/components/schemas/BaseMessageInputOptions'
        - properties:
            debug:
              type: boolean
              description: >-
                Whether to return additional diagnostic information. Set to
                `true` to return additional information in the `output.debug`
                property. If you also specify **return_context**=`true`, the
                returned skill context includes the `system.state` property.
              default: false
            return_context:
              type: boolean
              description: >-
                Whether to return session context with the response. If you
                specify `true`, the response includes the `context` property. If
                you also specify **debug**=`true`, the returned skill context
                includes the `system.state` property.
              default: false
            export:
              type: boolean
              description: >-
                Whether to return session context, including full conversation
                state. If you specify `true`, the response includes the
                `context` property, and the skill context includes the
                `system.state` property.


                **Note:** If **export**=`true`, the context is returned
                regardless of the value of **return_context**.
              default: false
    MessageInputOptionsAutoLearn:
      description: |-
        Autolearning options for the message.

        **Note:** Autolearning is a beta feature.
      properties:
        learn:
          type: boolean
          description: >-
            Whether the message should be used for autolearning. Specify `false`
            to exclude a message from autolearning (for example, if you are
            running tests on a production assistant). If autolearning is not
            enabled for the dialog skill, this option is ignored.
          default: true
        apply:
          type: boolean
          description: >-
            Whether the autolearned model should be applied when responding to
            the message. You can use this option to compare responses with and
            without autolearning. If autolearning is not enabled for the dialog
            skill, this option is ignored.
          default: true
      x-sdk-exclude: true
    MessageInputOptionsSpelling:
      description: >-
        Spelling correction options for the message. Any options specified on an
        individual message override the settings configured for the skill.
      properties:
        suggestions:
          type: boolean
          description: >-
            Whether to use spelling correction when processing the input. If
            spelling correction is used and **auto_correct** is `true`, any
            spelling corrections are automatically applied to the user input. If
            **auto_correct** is `false`, any suggested corrections are returned
            in the **output.spelling** property.


            This property overrides the value of the **spelling_suggestions**
            property in the workspace settings for the skill.
        auto_correct:
          type: boolean
          description: >-
            Whether to use autocorrection when processing the input. If this
            property is `true`, any corrections are automatically applied to the
            user input, and the original text is returned in the
            **output.spelling** property of the message response. This property
            overrides the value of the **spelling_auto_correct** property in the
            workspace settings for the skill.
    MessageInputStateless:
      allOf:
        - $ref: '#/components/schemas/BaseMessageInput'
        - properties:
            options:
              $ref: '#/components/schemas/MessageInputOptionsStateless'
      x-java-builder: true
    MessageInputOptionsStateless:
      allOf:
        - $ref: '#/components/schemas/BaseMessageInputOptions'
        - properties:
            debug:
              type: boolean
              description: >-
                Whether to return additional diagnostic information. Set to
                `true` to return additional information in the `output.debug`
                property.
              default: false
    MessageOutput:
      description: Assistant output to be rendered or processed by the client.
      properties:
        generic:
          type: array
          description: >-
            Output intended for any channel. It is the responsibility of the
            client application to implement the supported response types.
          items:
            $ref: '#/components/schemas/RuntimeResponseGeneric'
        intents:
          description: >-
            An array of intents recognized in the user input, sorted in
            descending order of confidence
          type: array
          items:
            $ref: '#/components/schemas/RuntimeIntent'
        entities:
          description: An array of entities identified in the user input
          type: array
          items:
            $ref: '#/components/schemas/RuntimeEntity'
        actions:
          description: >-
            An array of objects describing any actions requested by the dialog
            node.
          type: array
          items:
            $ref: '#/components/schemas/DialogNodeAction'
        debug:
          $ref: '#/components/schemas/MessageOutputDebug'
        user_defined:
          type: object
          description: >-
            An object containing any custom properties included in the response.
            This object includes any arbitrary properties defined in the dialog
            JSON editor as part of the dialog node output.
          additionalProperties: true
        spelling:
          $ref: '#/components/schemas/MessageOutputSpelling'
    MessageOutputDebug:
      description: >-
        Additional detailed information about a message response and how it was
        generated.
      properties:
        nodes_visited:
          type: array
          description: >-
            An array of objects containing detailed diagnostic information about
            the nodes that were triggered during processing of the input
            message. 
          items:
            type: object
            title: DialogNodesVisited
            properties:
              dialog_node:
                type: string
                description: >-
                  A dialog node that was triggered during processing of the
                  input message.
              title:
                type: string
                description: The title of the dialog node.
              conditions:
                type: string
                description: The conditions that trigger the dialog node.
        log_messages:
          type: array
          description: An array of up to 50 messages logged with the request.
          items:
            $ref: '#/components/schemas/DialogLogMessage'
        branch_exited:
          type: boolean
          description: >-
            Assistant sets this to true when this message response concludes or
            interrupts a dialog.
        branch_exited_reason:
          type: string
          description: >-
            When `branch_exited` is set to `true` by the Assistant, the
            `branch_exited_reason` specifies whether the dialog completed by
            itself or got interrupted.
          enum:
            - completed
            - fallback
        auto_learn:
          $ref: '#/components/schemas/MessageOutputDebugAutoLearn'
    MessageOutputDebugAutoLearn:
      description: >-
        Detailed information about how autolearning (if enabled) affected the
        response.


        **Note:** Autolearning is a beta feature.
      properties:
        preview:
          type: boolean
          description: >-
            Whether autolearning was in preview mode when the message was
            processed. Preview mode means that autolearning is enabled, but the
            autolearned model is not being applied.
        disambiguation:
          $ref: '#/components/schemas/MessageOutputDebugAutoLearnModel'
        alternate_responses:
          $ref: '#/components/schemas/MessageOutputDebugAutoLearnModel'
      x-sdk-exclude: true
    MessageOutputDebugAutoLearnModel:
      description: >-
        Detailed information about how an autolearned model affected the
        response.
      properties:
        outcome:
          type: string
          description: Whether the model was consulted successfully.
          enum:
            - success
            - failure
        model_type:
          type: string
          description: How the model was applied.
          enum:
            - autolearn
            - autolearn_explore
            - supervised
        model_id:
          type: string
          description: Unique identifier of the autolearned model.
        suggestions:
          description: >-
            Possible responses the assistant would have returned with
            autolearning applied, either as disambiguation suggestions or
            alternate responses. Included only if the response was generated
            with autolearning in preview mode. (Preview mode means that
            autolearning is enabled, but is not being applied.)
          type: array
          items:
            $ref: '#/components/schemas/DialogSuggestion'
    MessageOutputSpelling:
      type: object
      description: >-
        Properties describing any spelling corrections in the user input that
        was received.
      properties:
        text:
          description: >-
            The user input text that was used to generate the response. If
            spelling autocorrection is enabled, this text reflects any spelling
            corrections that were applied.
          type: string
        original_text:
          description: >-
            The original user input text. This property is returned only if
            autocorrection is enabled and the user input was corrected.
          type: string
        suggested_text:
          description: >-
            Any suggested corrections of the input text. This property is
            returned only if spelling correction is enabled and autocorrection
            is disabled.
          type: string
    MessageRequest:
      type: object
      description: A stateful message request formatted for the Watson Assistant service.
      properties:
        input:
          $ref: '#/components/schemas/MessageInput'
        context:
          allOf:
            - $ref: '#/components/schemas/MessageContext'
            - description: >-
                Context data for the conversation. You can use this property to
                set or modify context variables, which can also be accessed by
                dialog nodes. The context is stored by the assistant on a
                per-session basis.


                **Note:** The total size of the context data stored for a
                stateful session cannot exceed 100KB.
      example:
        input:
          message_type: text
          text: Hello
          options:
            return_context: true
            export: true
        context:
          global:
            system:
              user_id: my_user_id
    MessageRequestStateless:
      type: object
      description: A stateless message request formatted for the Watson Assistant service.
      properties:
        input:
          $ref: '#/components/schemas/MessageInputStateless'
        context:
          allOf:
            - $ref: '#/components/schemas/MessageContextStateless'
            - description: >-
                Context data for the conversation. You can use this property to
                set or modify context variables, which can also be accessed by
                dialog nodes. The context is not stored by the assistant. To
                maintain session state, include the context from the previous
                response.


                **Note:** The total size of the context data for a stateless
                session cannot exceed 250KB.
      example:
        input:
          message_type: text
          text: I want to cancel my order
        context:
          global:
            system:
              user_id: my_user_id
              turn_count: 1
            session_id: 89fe006f-7068-40b7-a898-ba9240904000
          skills:
            main skill:
              system:
                state: >-
                  eyJzZXNzaW9uX2lkIjoiODlmZTAwNmYtNzA2OC00MGI3LWE4OTgtYmE5MjQwOTA0MDAwIiwic2tpbGxfcmVmZXJlbmNlIjoibWFpbiBza2lsbCIsImFzc2lzdGFudF9pZCI6ImViM2RmZGRlLTJkNDUtNDBmYS05NDZlLTk2ODVmNTU2NzhhOSIsImluaXRpYWxpemVkIjp0cnVlLCJkaWFsb2dfc3RhY2siOlt7ImRpYWxvZ19ub2RlIjoicm9vdCJ9XSwiX25vZGVfb3V0cHV0X21hcCI6eyJub2RlXzJfMTU3MTA3NDUxMzc0NSI6WzBdfSwibGFzdF9icmFuY2hfbm9kZSI6Im5vZGVfMl8xNTcxMDc0NTEzNzQ1In0=
    MessageResponse:
      description: A response from the Watson Assistant service.
      properties:
        output:
          $ref: '#/components/schemas/MessageOutput'
        context:
          allOf:
            - $ref: '#/components/schemas/MessageContext'
            - description: >-
                Context data for the conversation. You can use this property to
                access context variables. The context is stored by the assistant
                on a per-session basis.


                **Note:** The context is included in message responses only if
                **return_context**=`true` in the message request. Full context
                is always included in logs.
      required:
        - output
    MessageResponseStateless:
      description: A stateless response from the Watson Assistant service.
      properties:
        output:
          $ref: '#/components/schemas/MessageOutput'
        context:
          allOf:
            - $ref: '#/components/schemas/MessageContextStateless'
            - description: >-
                Context data for the conversation. You can use this property to
                access context variables. The context is not stored by the
                assistant; to maintain session state, include the context from
                the response in the next message.
      required:
        - output
        - context
    RuntimeEntity:
      description: The entity value that was recognized in the user input.
      type: object
      required:
        - entity
        - location
        - value
      properties:
        entity:
          type: string
          description: An entity detected in the input.
        location:
          type: array
          description: >-
            An array of zero-based character offsets that indicate where the
            detected entity values begin and end in the input text.
          items:
            type: integer
          maxItems: 2
          minItems: 2
        value:
          type: string
          description: The term in the input text that was recognized as an entity value.
        confidence:
          type: number
          description: >-
            A decimal percentage that represents Watson's confidence in the
            recognized entity.
        metadata:
          type: object
          description: Any metadata for the entity.
          additionalProperties: true
        groups:
          type: array
          description: >-
            The recognized capture groups for the entity, as defined by the
            entity pattern.
          items:
            title: CaptureGroup
            type: object
            required:
              - group
            properties:
              group:
                type: string
                description: A recognized capture group for the entity.
              location:
                type: array
                description: >-
                  Zero-based character offsets that indicate where the entity
                  value begins and ends in the input text.
                items:
                  type: integer
                maxItems: 2
                minItems: 2
        interpretation:
          allOf:
            - $ref: '#/components/schemas/RuntimeEntityInterpretation'
            - description: >-
                An object containing detailed information about the entity
                recognized in the user input. This property is included only if
                the new system entities are enabled for the skill.


                For more information about how the new system entities are
                interpreted, see the
                [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-beta-system-entities).
        alternatives:
          type: array
          description: >-
            An array of possible alternative values that the user might have
            intended instead of the value returned in the **value** property.
            This property is returned only for `@sys-time` and `@sys-date`
            entities when the user's input is ambiguous.


            This property is included only if the new system entities are
            enabled for the skill.
          items:
            $ref: '#/components/schemas/RuntimeEntityAlternative'
        role:
          $ref: '#/components/schemas/RuntimeEntityRole'
    RuntimeEntityAlternative:
      type: object
      description: An alternative value for the recognized entity.
      properties:
        value:
          type: string
          description: The entity value that was recognized in the user input.
        confidence:
          type: number
          description: >-
            A decimal percentage that represents Watson's confidence in the
            recognized entity.
    RuntimeEntityInterpretation:
      allOf:
        - $ref: '#/components/schemas/RuntimeEntityInterpretationSysDate'
        - $ref: '#/components/schemas/RuntimeEntityInterpretationSysNumber'
        - $ref: '#/components/schemas/RuntimeEntityInterpretationSysTime'
    RuntimeEntityInterpretationSysDate:
      properties:
        calendar_type:
          type: string
          description: >-
            The calendar used to represent a recognized date (for example,
            `Gregorian`).
        datetime_link:
          type: string
          description: >-
            A unique identifier used to associate a time and date. If the user
            input contains a date and time that are mentioned together (for
            example, `Today at 5`, the same **datetime_link** value is returned
            for both the `@sys-date` and `@sys-time` entities).
        festival:
          type: string
          description: >-
            A locale-specific holiday name (such as `thanksgiving` or
            `christmas`). This property is included when a `@sys-date` entity is
            recognized based on a holiday name in the user input.
        granularity:
          type: string
          description: >-
            The precision or duration of a time range specified by a recognized
            `@sys-time` or `@sys-date` entity.
          enum:
            - day
            - fortnight
            - hour
            - instant
            - minute
            - month
            - quarter
            - second
            - week
            - weekend
            - year
        range_link:
          type: string
          description: >-
            A unique identifier used to associate multiple recognized
            `@sys-date`, `@sys-time`, or `@sys-number` entities that are
            recognized as a range of values in the user's input (for example,
            `from July 4 until July 14` or `from 20 to 25`).
        range_modifier:
          type: string
          description: >-
            The word in the user input that indicates that a `sys-date` or
            `sys-time` entity is part of an implied range where only one date or
            time is specified (for example, `since` or `until`).
        relative_day:
          type: number
          description: >-
            A recognized mention of a relative day, represented numerically as
            an offset from the current date (for example, `-1` for `yesterday`
            or `10` for `in ten days`).
        relative_month:
          type: number
          description: >-
            A recognized mention of a relative month, represented numerically as
            an offset from the current month (for example, `1` for `next month`
            or `-3` for `three months ago`).
        relative_week:
          type: number
          description: >-
            A recognized mention of a relative week, represented numerically as
            an offset from the current week (for example, `2` for `in two weeks`
            or `-1` for `last week).
        relative_weekend:
          type: number
          description: >-
            A recognized mention of a relative date range for a weekend,
            represented numerically as an offset from the current weekend (for
            example, `0` for `this weekend` or `-1` for `last weekend`).
        relative_year:
          type: number
          description: >-
            A recognized mention of a relative year, represented numerically as
            an offset from the current year (for example, `1` for `next year` or
            `-5` for `five years ago`).
        specific_day:
          type: number
          description: >-
            A recognized mention of a specific date, represented numerically as
            the date within the month (for example, `30` for `June 30`.)
        specific_day_of_week:
          type: string
          description: >-
            A recognized mention of a specific day of the week as a lowercase
            string (for example, `monday`).
        specific_month:
          type: number
          description: >-
            A recognized mention of a specific month, represented numerically
            (for example, `7` for `July`).
        specific_quarter:
          type: number
          description: >-
            A recognized mention of a specific quarter, represented numerically
            (for example, `3` for `the third quarter`).
        specific_year:
          type: number
          description: 'A recognized mention of a specific year (for example, `2016`).'
    RuntimeEntityInterpretationSysNumber:
      properties:
        numeric_value:
          type: number
          description: 'A recognized numeric value, represented as an integer or double.'
        range_link:
          type: string
          description: >-
            A unique identifier used to associate multiple recognized
            `@sys-date`, `@sys-time`, or `@sys-number` entities that are
            recognized as a range of values in the user's input (for example,
            `from July 4 until July 14` or `from 20 to 25`).
        subtype:
          type: string
          description: >-
            The type of numeric value recognized in the user input (`integer` or
            `rational`).
    RuntimeEntityInterpretationSysTime:
      properties:
        datetime_link:
          type: string
          description: >-
            A unique identifier used to associate a recognized time and date. If
            the user input contains a date and time that are mentioned together
            (for example, `Today at 5`, the same **datetime_link** value is
            returned for both the `@sys-date` and `@sys-time` entities).
        granularity:
          type: string
          description: >-
            The precision or duration of a time range specified by a recognized
            `@sys-time` or `@sys-date` entity.
          enum:
            - day
            - fortnight
            - hour
            - instant
            - minute
            - month
            - quarter
            - second
            - week
            - weekend
            - year
        part_of_day:
          type: string
          description: >-
            A recognized term for a time that was mentioned as a part of the day
            in the user's input (for example, `morning` or `afternoon`).
        range_link:
          type: string
          description: >-
            A unique identifier used to associate multiple recognized
            `@sys-date`, `@sys-time`, or `@sys-number` entities that are
            recognized as a range of values in the user's input (for example,
            `from July 4 until July 14` or `from 20 to 25`).
        relative_hour:
          type: number
          description: >-
            A recognized mention of a relative hour, represented numerically as
            an offset from the current hour (for example, `3` for `in three
            hours` or `-1` for `an hour ago`).
        relative_minute:
          type: number
          description: >-
            A recognized mention of a relative time, represented numerically as
            an offset in minutes from the current time (for example, `5` for `in
            five minutes` or `-15` for `fifteen minutes ago`).
        relative_second:
          type: number
          description: >-
            A recognized mention of a relative time, represented numerically as
            an offset in seconds from the current time (for example, `10` for
            `in ten seconds` or `-30` for `thirty seconds ago`).
        specific_hour:
          type: number
          description: >-
            A recognized specific hour mentioned as part of a time value (for
            example, `10` for `10:15 AM`.)
        specific_minute:
          type: number
          description: >-
            A recognized specific minute mentioned as part of a time value (for
            example, `15` for `10:15 AM`.)
        specific_second:
          type: number
          description: >-
            A recognized specific second mentioned as part of a time value (for
            example, `30` for `10:15:30 AM`.)
        timezone:
          type: string
          description: >-
            A recognized time zone mentioned as part of a time value (for
            example, `EST`).
    RuntimeEntityRole:
      description: >-
        An object describing the role played by a system entity that is
        specifies the beginning or end of a range recognized in the user input.
        This property is included only if the new system entities are enabled
        for the skill.
      properties:
        type:
          type: string
          description: The relationship of the entity to the range.
          enum:
            - date_from
            - date_to
            - number_from
            - number_to
            - time_from
            - time_to
    RuntimeIntent:
      type: object
      description: An intent identified in the user input.
      required:
        - intent
        - confidence
      properties:
        intent:
          type: string
          description: The name of the recognized intent.
        confidence:
          type: number
          format: double
          description: >-
            A decimal percentage that represents Watson's confidence in the
            intent.
    RuntimeResponseGeneric:
      allOf:
        - properties:
            response_type:
              type: string
              enum:
                - text
                - pause
                - image
                - option
                - connect_to_agent
                - suggestion
                - search
              description: >-
                The type of response returned by the dialog node. The specified
                response type must be supported by the client application or
                channel.
          required:
            - response_type
        - $ref: '#/components/schemas/RuntimeResponseTypeText'
        - $ref: '#/components/schemas/RuntimeResponseTypePause'
        - $ref: '#/components/schemas/RuntimeResponseTypeImage'
        - $ref: '#/components/schemas/RuntimeResponseTypeOption'
        - $ref: '#/components/schemas/RuntimeResponseTypeConnectToAgent'
        - $ref: '#/components/schemas/RuntimeResponseTypeSuggestion'
        - $ref: '#/components/schemas/RuntimeResponseTypeSearch'
      x-java-builder: true
    RuntimeResponseTypeConnectToAgent:
      properties:
        message_to_human_agent:
          type: string
          description: >-
            A message to be sent to the human agent who will be taking over the
            conversation.
        topic:
          type: string
          readOnly: true
          description: >-
            A label identifying the topic of the conversation, derived from the
            **user_label** property of the relevant node.
    RuntimeResponseTypeImage:
      properties:
        source:
          type: string
          description: The URL of the image.
        title:
          type: string
          description: The title to show before the response.
        description:
          type: string
          description: The description to show with the the response.
    RuntimeResponseTypeOption:
      properties:
        title:
          type: string
          description: The title or introductory text to show before the response.
        description:
          type: string
          description: The description to show with the the response.
        preference:
          type: string
          description: The preferred type of control to display.
          enum:
            - dropdown
            - button
        options:
          type: array
          items:
            $ref: '#/components/schemas/DialogNodeOutputOptionsElement'
          description: >-
            An array of objects describing the options from which the user can
            choose.
    RuntimeResponseTypePause:
      properties:
        time:
          type: integer
          description: 'How long to pause, in milliseconds.'
        typing:
          type: boolean
          description: Whether to send a "user is typing" event during the pause.
    RuntimeResponseTypeSearch:
      properties:
        header:
          type: string
          description: >-
            The title or introductory text to show before the response. This
            text is defined in the search skill configuration.
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: >-
            An array of objects containing search results. This property is
            included only if you are using an API version earlier than
            `2020-09-24`.
        primary_results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: >-
            An array of objects containing the search results to be displayed in
            the initial response to the user. This property is included only if
            you are using API version `2020-09-24` or later.
          x-sdk-exclude: true
        additional_results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: >-
            An array of objects containing additional search results that can be
            displayed to the user upon request. This property is included only
            if you are using API version `2020-09-24` or later.
          x-sdk-exclude: true
    RuntimeResponseTypeSuggestion:
      properties:
        title:
          type: string
          description: The title or introductory text to show before the response.
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/DialogSuggestion'
          description: >-
            An array of objects describing the possible matching dialog nodes
            from which the user can choose.
    RuntimeResponseTypeText:
      properties:
        text:
          type: string
          description: The text of the response.
    SearchResult:
      properties:
        id:
          type: string
          description: >-
            The unique identifier of the document in the Discovery service
            collection.


            This property is included in responses from search skills, which are
            available only to Plus or Premium plan users.
        result_metadata:
          $ref: '#/components/schemas/SearchResultMetadata'
        body:
          type: string
          description: >-
            A description of the search result. This is taken from an abstract,
            summary, or highlight field in the Discovery service response, as
            specified in the search skill configuration.
        title:
          type: string
          description: >-
            The title of the search result. This is taken from a title or name
            field in the Discovery service response, as specified in the search
            skill configuration.
        url:
          type: string
          description: The URL of the original data object in its native data source.
        highlight:
          $ref: '#/components/schemas/SearchResultHighlight'
      required:
        - id
        - result_metadata
    SearchResultHighlight:
      description: >-
        An object containing segments of text from search results with
        query-matching text highlighted using HTML `<em>` tags.
      properties:
        body:
          type: array
          description: >-
            An array of strings containing segments taken from body text in the
            search results, with query-matching substrings highlighted.
          items:
            type: string
        title:
          type: array
          description: >-
            An array of strings containing segments taken from title text in the
            search results, with query-matching substrings highlighted.
          items:
            type: string
        url:
          type: array
          description: >-
            An array of strings containing segments taken from URLs in the
            search results, with query-matching substrings highlighted.
          items:
            type: string
      additionalProperties:
        description: >-
          An array of strings containing segments taken from a field in the
          search results that is not mapped to the `body`, `title`, or `url`
          property, with query-matching substrings highlighted. The property
          name is the name of the field in the Discovery collection.
        type: array
        items:
          type: string
    SearchResultMetadata:
      description: An object containing search result metadata from the Discovery service.
      properties:
        confidence:
          type: number
          format: double
          description: >-
            The confidence score for the given result. For more information
            about how the confidence is calculated, see the Discovery service
            [documentation](../discovery#query-your-collection).
        score:
          type: number
          format: double
          description: >-
            An unbounded measure of the relevance of a particular result,
            dependent on the query and matching document. A higher score
            indicates a greater match to the query parameters.
    SessionResponse:
      properties:
        session_id:
          type: string
          description: The session ID.
      required:
        - session_id
